import{_ as c,E as p,T as l,a as u,d as o}from"./vendor-BlXVsT1S.js";function E(){import.meta.url,import("_").catch(()=>1),async function*(){}().next()}(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))r(t);new MutationObserver(t=>{for(const s of t)if(s.type==="childList")for(const i of s.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&r(i)}).observe(document,{childList:!0,subtree:!0});function a(t){const s={};return t.integrity&&(s.integrity=t.integrity),t.referrerPolicy&&(s.referrerPolicy=t.referrerPolicy),t.crossOrigin==="use-credentials"?s.credentials="include":t.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function r(t){if(t.ep)return;t.ep=!0;const s=a(t);fetch(t.href,s)}})();const d="ws://localhost:8435",y=1e3,f=120;class T{constructor(){this.addEventListeners(),this.transportType="u2f"}addEventListeners(){window.addEventListener("message",async e=>{if(e&&e.data&&e.data.target==="LEDGER-IFRAME"){const{action:a,params:r,messageId:t}=e.data,s="".concat(a,"-reply");switch(a){case"ledger-unlock":this.unlock(s,r.hdPath,t);break;case"ledger-sign-transaction":console.log("ledger-sign-transaction",r),this.signTransaction(s,r.hdPath,r.tx,t);break;case"ledger-sign-personal-message":this.signPersonalMessage(s,r.hdPath,r.message,t);break;case"ledger-close-bridge":this.cleanUp(s,t);break;case"ledger-update-transport":r.transportType==="ledgerLive"||r.useLedgerLive?this.updateTransportTypePreference(s,"ledgerLive",t):r.transportType==="webhid"?this.updateTransportTypePreference(s,"webhid",t):this.updateTransportTypePreference(s,"u2f",t);break;case"ledger-make-app":this.attemptMakeApp(s,t);break;case"ledger-sign-typed-data":this.signTypedData(s,r.hdPath,r.message,t);break}}},!1)}sendMessageToExtension(e){window.parent.postMessage(e,"*")}delay(e){return new Promise(a=>setTimeout(a,e))}checkTransportLoop(e){const a=e||0;return c.check(d).catch(async()=>{if(await this.delay(y),a<f)return this.checkTransportLoop(a+1);throw new Error("Ledger transport check timeout")})}async attemptMakeApp(e,a){try{await this.makeApp({openOnly:!0}),await this.cleanUp(),this.sendMessageToExtension({action:e,success:!0,messageId:a})}catch(r){await this.cleanUp(),this.sendMessageToExtension({action:e,success:!1,messageId:a,error:r})}}async makeApp(e={}){try{if(this.transportType==="ledgerLive"){let a=!1;try{await c.check(d)}catch(r){window.open("ledgerlive://bridge?appName=Ethereum"),await this.checkTransportLoop(),a=!0}(!this.app||a)&&(this.transport=await c.open(d),this.app=new p(this.transport))}else if(this.transportType==="webhid"){const a=this.transport&&this.transport.device,r=a&&a.constructor.name,t=a&&a.opened;if(this.app&&r==="HIDDevice"&&t)return;this.transport=e.openOnly?await l.openConnected():await l.create(),this.app=new p(this.transport)}else this.transport=await u.create(),this.app=new p(this.transport)}catch(a){throw console.log("LEDGER:::CREATE APP ERROR",a),a}}updateTransportTypePreference(e,a,r){this.transportType=a,this.cleanUp(),this.sendMessageToExtension({action:e,success:!0,messageId:r})}async cleanUp(e,a){this.app=null,this.transport&&(await this.transport.close(),this.transport=null),e&&this.sendMessageToExtension({action:e,success:!0,messageId:a})}async unlock(e,a,r){try{await this.makeApp();const t=await this.app.getAddress(a,!1,!0);this.sendMessageToExtension({action:e,success:!0,payload:t,messageId:r})}catch(t){const s=this.ledgerErrToMessage(t);this.sendMessageToExtension({action:e,success:!1,payload:{error:s},messageId:r})}finally{this.transportType!=="ledgerLive"&&this.cleanUp()}}async signTransaction(e,a,r,t){try{await this.makeApp();const s=await this.app.clearSignTransaction(a,r,{nft:!0,externalPlugins:!0,erc20:!0});this.sendMessageToExtension({action:e,success:!0,payload:s,messageId:t})}catch(s){const i=this.ledgerErrToMessage(s);this.sendMessageToExtension({action:e,success:!1,payload:{error:i},messageId:t})}finally{this.transportType!=="ledgerLive"&&this.cleanUp()}}async signPersonalMessage(e,a,r,t){try{await this.makeApp();const s=await this.app.signPersonalMessage(a,r);this.sendMessageToExtension({action:e,success:!0,payload:s,messageId:t})}catch(s){const i=this.ledgerErrToMessage(s);this.sendMessageToExtension({action:e,success:!1,payload:{error:i},messageId:t})}finally{this.transportType!=="ledgerLive"&&this.cleanUp()}}async signTypedData(e,a,r,t){try{await this.makeApp();let s;try{s=await this.app.signEIP712Message(a,r)}catch(i){const n=o.TypedDataUtils.hashStruct("EIP712Domain",r.domain,r.types,o.SignTypedDataVersion.V4).toString("hex"),g=o.TypedDataUtils.hashStruct(r.primaryType,r.message,r.types,o.SignTypedDataVersion.V4).toString("hex");s=await this.app.signEIP712HashedMessage(a,n,g)}this.sendMessageToExtension({action:e,success:!0,payload:s,messageId:t})}catch(s){const i=this.ledgerErrToMessage(s);this.sendMessageToExtension({action:e,success:!1,payload:{error:i},messageId:t})}finally{this.cleanUp()}}ledgerErrToMessage(e){const a=n=>!!n&&!!n.metaData,r=n=>typeof n=="string",t=n=>n.hasOwnProperty("id")&&n.hasOwnProperty("message"),s=n=>String(n.message||n).includes("6804"),i=n=>n.message&&n.message.includes("OpenFailed");return a(e)?e.metaData.code===5?new Error("LEDGER_TIMEOUT"):e.metaData.type:s(e)?new Error("LEDGER_WRONG_APP"):i(e)||r(e)&&e.includes("6801")?new Error("LEDGER_LOCKED"):t(e)&&e.message.includes("U2F not supported")?new Error("U2F_NOT_SUPPORTED"):e}}(async()=>new T)();console.log("MetaMask < = > Ledger Bridge initialized from ".concat(window.location,"!"));export{E as __vite_legacy_guard};
