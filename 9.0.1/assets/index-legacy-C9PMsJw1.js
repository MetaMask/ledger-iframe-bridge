System.register(["./vendor-legacy-98DcKUFp.js"],(function(e,s){"use strict";var a,t,n,i,r,o;return{setters:[e=>{a=e._,t=e.E,n=e.T,i=e.a,r=e.d,o=e.b}],execute:function(){const e="ws://localhost:8435",s=e=>e instanceof o?{message:e.message,name:e.name,stack:e.stack,statusCode:e.statusCode,statusText:e.statusText}:{message:e.message,name:e.name,stack:e.stack};class c{constructor(){this.addEventListeners(),this.transportType="u2f"}addEventListeners(){window.addEventListener("message",(async e=>{if(e&&e.data&&"LEDGER-IFRAME"===e.data.target){const{action:s,params:a,messageId:t}=e.data,n=`${s}-reply`;switch(s){case"ledger-is-iframe-ready":this.sendMessageToExtension({action:n,success:!0,messageId:t});break;case"ledger-unlock":this.unlock(n,a.hdPath,t);break;case"ledger-sign-transaction":console.log("ledger-sign-transaction",a),this.signTransaction(n,a.hdPath,a.tx,t);break;case"ledger-sign-personal-message":this.signPersonalMessage(n,a.hdPath,a.message,t);break;case"ledger-close-bridge":this.cleanUp(n,t);break;case"ledger-update-transport":"ledgerLive"===a.transportType||a.useLedgerLive?this.updateTransportTypePreference(n,"ledgerLive",t):"webhid"===a.transportType?this.updateTransportTypePreference(n,"webhid",t):this.updateTransportTypePreference(n,"u2f",t);break;case"ledger-make-app":this.attemptMakeApp(n,t);break;case"ledger-sign-typed-data":this.signTypedData(n,a.hdPath,a.message,t)}}}),!1)}sendMessageToExtension(e){window.parent.postMessage(e,"*")}delay(e){return new Promise((s=>setTimeout(s,e)))}checkTransportLoop(s){const t=s||0;return a.check(e).catch((async()=>{if(await this.delay(1e3),t<120)return this.checkTransportLoop(t+1);throw new Error("Ledger transport check timeout")}))}async attemptMakeApp(e,a){try{await this.makeApp({openOnly:!0}),await this.cleanUp(),this.sendMessageToExtension({action:e,success:!0,messageId:a})}catch(t){await this.cleanUp(),this.sendMessageToExtension({action:e,success:!1,messageId:a,payload:{error:s(t)}})}}async makeApp(s={}){try{if("ledgerLive"===this.transportType){let s=!1;try{await a.check(e)}catch(r){window.open("ledgerlive://bridge?appName=Ethereum"),await this.checkTransportLoop(),s=!0}this.app&&!s||(this.transport=await a.open(e),this.app=new t(this.transport))}else if("webhid"===this.transportType){const e=this.transport&&this.transport.device,a=e&&e.constructor.name,i=e&&e.opened;if(this.app&&"HIDDevice"===a&&i)return;this.transport=s.openOnly?await n.openConnected():await n.create(),this.app=new t(this.transport)}else this.transport=await i.create(),this.app=new t(this.transport)}catch(o){throw console.log("LEDGER:::CREATE APP ERROR",o),o}}updateTransportTypePreference(e,s,a){this.transportType=s,this.cleanUp(),this.sendMessageToExtension({action:e,success:!0,messageId:a})}async cleanUp(e,s){this.app=null,this.transport&&(await this.transport.close(),this.transport=null),e&&this.sendMessageToExtension({action:e,success:!0,messageId:s})}async unlock(e,a,t){try{await this.makeApp();const s=await this.app.getAddress(a,!1,!0);this.sendMessageToExtension({action:e,success:!0,payload:s,messageId:t})}catch(n){this.sendMessageToExtension({action:e,success:!1,payload:{error:s(n)},messageId:t})}finally{"ledgerLive"!==this.transportType&&this.cleanUp()}}async signTransaction(e,a,t,n){try{await this.makeApp();const s=await this.app.clearSignTransaction(a,t,{nft:!0,externalPlugins:!0,erc20:!0});this.sendMessageToExtension({action:e,success:!0,payload:s,messageId:n})}catch(i){this.sendMessageToExtension({action:e,success:!1,payload:{error:s(i)},messageId:n})}finally{"ledgerLive"!==this.transportType&&this.cleanUp()}}async signPersonalMessage(e,a,t,n){try{await this.makeApp();const s=await this.app.signPersonalMessage(a,t);this.sendMessageToExtension({action:e,success:!0,payload:s,messageId:n})}catch(i){this.sendMessageToExtension({action:e,success:!1,payload:{error:s(i)},messageId:n})}finally{"ledgerLive"!==this.transportType&&this.cleanUp()}}async signTypedData(e,a,t,n){try{await this.makeApp();let s=await this.attemptSignEIP712Message(a,t);this.sendMessageToExtension({action:e,success:!0,payload:s,messageId:n})}catch(i){this.sendMessageToExtension({action:e,success:!1,payload:{error:s(i)},messageId:n})}finally{this.cleanUp()}}async attemptSignEIP712Message(e,s){try{return await this.app.signEIP712Message(e,s)}catch(a){const t=r.TypedDataUtils.hashStruct("EIP712Domain",s.domain,s.types,r.SignTypedDataVersion.V4).toString("hex"),n=r.TypedDataUtils.hashStruct(s.primaryType,s.message,s.types,r.SignTypedDataVersion.V4).toString("hex");return await this.app.signEIP712HashedMessage(e,t,n)}}ledgerErrToMessage(e){return(e=>!!e&&!!e.metaData)(e)?5===e.metaData.code?new Error("LEDGER_TIMEOUT"):e.metaData.type:(e=>String(e.message||e).includes("6804"))(e)?new Error("LEDGER_WRONG_APP"):(e=>e.message&&e.message.includes("OpenFailed"))(e)||(e=>"string"==typeof e)(e)&&e.includes("6801")?new Error("LEDGER_LOCKED"):(e=>e.hasOwnProperty("id")&&e.hasOwnProperty("message"))(e)&&e.message.includes("U2F not supported")?new Error("U2F_NOT_SUPPORTED"):e}}(async()=>{new c})(),console.log(`MetaMask < = > Ledger Bridge initialized from ${window.location}!`)}}}));
